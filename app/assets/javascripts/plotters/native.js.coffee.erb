class NmdPlot.Plotters.Native extends NmdPlot.Plotters.Base


  populateNavList: ()->
    # sort backgrounds by name
    for backgroundId in @sortedIds(@tmpGroups, @backgroundSorter)
      $background = $("<div class='background-name'>").html(@getBackground(backgroundId))
      $(".nav-list .items").append($background)

      # cumulate studentIds for background
      studentIdsForBackground = []
      for placeId, studentIds of @tmpGroups[backgroundId]
        studentIdsForBackground = studentIdsForBackground.concat(studentIds)

      # sort students by name
      for studentId in studentIdsForBackground.sort(@studentSorter)
        studentId  = studentId
        student    = @getStudent(studentId)
        placeId    = student.place_id
        $itemLabel = $("<span>")
          .attr(id: @labelId(backgroundId, placeId, studentId))
          .data('unique-ids', [backgroundId, placeId, studentId])
          .html(student.name)
        $item = $("<div>").addClass("item").append($itemLabel)

        if student.website?
          $itemLink  = $("<a>")
            .attr(
              href: student.website
              target: "_blank"
            ).html("<img src='<%= asset_path('arrow.png') %>'/>")
          $item.append($itemLink)

        $itemLabel.click @labelOnClick
        $(".nav-list .items").append($item)


  labelOnClick: (event)=>
    uniqueIds = $(event.target).data("unique-ids")

    $(".item").removeClass("selected-item")
    $(event.target).parent().addClass("selected-item")

    @view.geo.setDefaultIconOnMarkers(@previousMarkerIds)
    for studentId in @currentGroups[uniqueIds[0]][uniqueIds[1]]
      @view.geo.highlightMarker(@markerId(uniqueIds[0], uniqueIds[1], studentId))
      @previousMarkerIds.push @markerId(uniqueIds[0], uniqueIds[1], studentId)


  createMarker: (studentIds, opts) ->
    markup = ""

    for studentId in studentIds
      student = @getStudent(studentId)
      markup += """
        <div class="student">
          <div class='student-name'>#{student.name}</div>
          <div class='background-name'>#{@getBackground(student.background_id)}</div>
        </div>
      """
    opts['weight'] = studentIds.length
    @view.geo.createMarker markup, opts


  groupData: ->
    for studentId, student of @data.students
      if !@currentGroups[student.background_id]
        @currentGroups[student.background_id] = {}

      if !@currentGroups[student.background_id][student.place_id]
        @currentGroups[student.background_id][student.place_id] = []
        @addPlace(student.place_id)

      @currentGroups[student.background_id][student.place_id].push(studentId)

    @tmpGroups = @currentGroups


  # Trying to filter using currentGroups would be a nightmare for cleaning up data
  filterGroups: (string)->
    for studentId, student of @data.students
      continue if !student.name.match(new RegExp(string, "gi"))
      if !@tmpGroups[student.background_id]
        @tmpGroups[student.background_id] = {}

      if !@tmpGroups[student.background_id][student.place_id]
        @tmpGroups[student.background_id][student.place_id] = []
        @addPlace(student.place_id)

      @tmpGroups[student.background_id][student.place_id].push(studentId)


  plot: (options={})->
    @resetState(options)

    if !options.filter
      @groupData()
    else
      @filterGroups(options.filterString)

    for backgroundId, placeGroups of @tmpGroups
      for placeId, studentIds of placeGroups
        for studentId in studentIds
          @getPlace(placeId).name
          marker = @createMarker(
            [studentId],
            lat: @getPlace(placeId).latitude
            lng: @getPlace(placeId).longitude
            labelId: @labelId(backgroundId, placeId, studentId)
            leafletId: @markerId(backgroundId, placeId, studentId)
          )

    @populateNavList()
