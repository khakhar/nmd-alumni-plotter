class NmdPlot.Plotters.Internship extends NmdPlot.Plotters.Base

  populateNavList: ()->
    orgIds = []
    for orgId, placeGroups of @tmpGroups
      orgIds.push(orgId)

    for orgId in orgIds.sort(@organisationSorter)
      organisation = @getOrganisation(orgId)
      $orgLabel = $("<span>")
        .attr(id: @labelId(orgId))
        .data('unique-ids', [orgId])
        .html(organisation.name)
      $item = $("<div>").addClass("item").append($orgLabel)

      if organisation.website?
        $itemLink  = $("<a>")
          .attr(
            href: organisation.website
            target: "_blank"
          ).html($("<img>").attr('src', '<%= asset_path('arrow.png') %>'))
        $item.append($itemLink)

      $orgLabel.click @labelOnClick

      $students = $("<div>").addClass("students")
      for placeId, studentIds of @tmpGroups[orgId]
        for studentId in studentIds
          student = @getStudent(studentId)
          $student = $("<div>")
            .addClass("student")
            .html("- ")
          $student.append($("<a>").attr('href', student.website).html(student.name))
          $students.append($student)

      $item.append($students)
      $(".nav-list .items").append($item)



  labelOnClick: (event)=>
    uniqueIds = $(event.target).data("unique-ids")

    $(".item").removeClass("selected-item")
    $(event.target).parent().addClass("selected-item")

    @view.geo.setDefaultIconOnMarkers(@previousMarkerIds)
    for placeId, studentIds of @currentGroups[uniqueIds[0]]
      @view.geo.highlightMarker(@markerId(uniqueIds[0], placeId))
      @previousMarkerIds.push @markerId(uniqueIds[0], placeId)


  createMarker: (studentIds, opts) ->
    markup = ""

    for studentId in studentIds
      student = @getStudent(studentId)
      markup += """
        <div class="student">
          <div class='student-name'>#{student.name}</div>
          <div class='project-title'>#{student.project_title}</div>
        </div>
      """
    opts['weight'] = studentIds.length
    @view.geo.createMarker markup, opts


  groupData: ->
    for studentId, student of @data.students
      continue if !student.internship_place_id

      orgId   = student.internship_organisation_id
      placeId = student.internship_place_id

      if !@currentGroups[orgId]
        @currentGroups[orgId] = {}

      if !@currentGroups[orgId][placeId]
        @currentGroups[orgId][placeId] = []
        @addPlace(placeId)

      @currentGroups[orgId][placeId].push(studentId)

    @tmpGroups = @currentGroups


  # Trying to filter using currentGroups would be a nightmare for cleaning up data
  filterGroups: (string)->
    for studentId, student of @data.students
      continue if !student.internship_place_id

      organisation = @getOrganisation(student.internship_organisation_id)
      continue if !organisation.name.match(new RegExp(string, "gi"))

      orgId   = student.internship_organisation_id
      placeId = student.internship_place_id

      if !@tmpGroups[orgId]
        @tmpGroups[orgId] = {}

      if !@tmpGroups[orgId][placeId]
        @tmpGroups[orgId][placeId] = []
        @addPlace(placeId)

      @tmpGroups[orgId][placeId].push(studentId)


  plot: (options={})->
    @resetState(options)

    if !options.filter
      @groupData()
    else
      @filterGroups(options.filterString)

    for orgId, placeGroups of @tmpGroups
      for placeId, studentIds of placeGroups
        place   = @getPlace(placeId)
        marker  = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude
          lng: @getPlace(placeId).longitude
          labelId: @labelId(orgId)
          leafletId: @markerId(orgId, placeId)
        )

    @populateNavList()
