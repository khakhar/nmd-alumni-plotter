class NmdPlot.View
  currentGroups: {}
  previousMarkerIds: []
  navListItems: {}
  placesWithMarkers: []

  constructor: (containerId, @data)->
    @map = new NmdPlot.Map(containerId)


  populateNavList: (appendTree=false)->
    ids = (groupId for groupId, attrs of @navListItems)

    sortedIds = ids.sort (a, b)=>
      if [@navListItems[a].name, @navListItems[b].name].sort().indexOf(@navListItems[a].name) == 0
        return -1
      else
        return 1

    for id in ids
      groupId    = id
      $itemLabel = $("<span>")
        .attr(id: "group-label-#{id}")
        .html(@navListItems[id].name)
        .data("group-id", groupId)

      $item = $("<div>").addClass("item").append($itemLabel)


      if @navListItems[id].website?
        $itemLink  = $("<a>")
          .attr(
            href: @navListItems[id].website
            target: "_blank"
          ).html("<img src='<%= asset_path('arrow.png') %>'/>")
        $item.append($itemLink)


      if appendTree == true
        $item.append(@getStudentsMarkupForOrganisation(id))


      $itemLabel.click @labelOnClick
      $(".nav-list .items").append($item)


  labelOnClick: (event)=>
    groupId   = $(event.target).data("group-id")
    $(".item").removeClass("selected-item")
    $(event.target).parent().addClass("selected-item")

    @map.setDefaultIconOnMarkers(@previousMarkerIds)
    for placeId, studentIds of @currentGroups[groupId]
      @map.highlightMarker("group-#{groupId}-#{placeId}")
      @previousMarkerIds.push "group-#{groupId}-#{placeId}"


  addItemToList: (name, groupId, website)->
    @navListItems[groupId] = {name: name, website: website}



  markersByCurrentLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        continue if !student.current_work_place_id
        if !@currentGroups[student.current_organisation_id]
          @currentGroups[student.current_organisation_id] = {}

        if !@currentGroups[student.current_organisation_id][student.current_place_id]
          @currentGroups[student.current_organisation_id][student.current_place_id] = []
        @currentGroups[student.current_organisation_id][student.current_place_id].push(id)

      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getOrganisation(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group


    for id, group of @tmpGroups
      organisation = @getOrganisation(id)
      @addItemToList(organisation.name, id, organisation.website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude
          lng: @getPlace(placeId).longitude
          leafletId: "group-#{id}-#{placeId}"
          labelId:   "group-label-#{id}"
        )
        if @placesWithMarkers.indexOf(placeId) == -1
          @placesWithMarkers.push(placeId)


  markersByInternshipLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        continue if !student.internship_place_id
        if !@currentGroups[student.internship_organisation_id]
          @currentGroups[student.internship_organisation_id] = {}
        if !@currentGroups[student.internship_organisation_id][student.internship_place_id]
          @currentGroups[student.internship_organisation_id][student.internship_place_id] = []
        @currentGroups[student.internship_organisation_id][student.internship_place_id].push(id)

      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getOrganisation(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group


    for id, group of @tmpGroups
      organisation = @getOrganisation(id)
      @addItemToList(organisation.name, id, organisation.website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude
          lng: @getPlace(placeId).longitude
          leafletId: "group-#{id}-#{placeId}"
          labelId:   "group-label-#{id}"
        )
        if @placesWithMarkers.indexOf(placeId) == -1
          @placesWithMarkers.push(placeId)


  markersByNativeLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        @currentGroups[id] = {}
        @currentGroups[id][student.place_id] = [id]

      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getStudent(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group

    for id, group of @tmpGroups
      @addItemToList(@getStudent(id).name, id, @getStudent(id).website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude
          lng: @getPlace(placeId).longitude
          labelId:   "group-label-#{id}"
          leafletId: "group-#{id}-#{placeId}"
          noDetail: true
        )

      if @placesWithMarkers.indexOf(placeId) == -1
        @placesWithMarkers.push(placeId)


  plot: (plotBy, filter=false, filterString="")=>
    $(".nav-list .items").empty()
    @map.clear()

    if !filter
      @currentPlotter = new NmdPlot.Plotters[plotBy](@, @data)
      @currentPlotter.plot()
      $("#search").val("")
    else 
      @currentPlotter.plot(filter: true, filterString: filterString)
