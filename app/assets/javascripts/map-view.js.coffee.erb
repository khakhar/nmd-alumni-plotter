class window.MapView
  currentGroups: {}
  previousMarkerIds: []
  navListItems: {}
  placesWithMarkers: []

  constructor: (containerId, @data)->
    @map = new LeafletMap(containerId)


  getStudent:      (id)-> @data.students[id]
  getOrganisation: (id)-> @data.organisations[id]
  getPlace:        (id)-> @data.places[id]



  addPlaceMarkers: ()->
    for placeId in @placesWithMarkers
      place = @getPlace(placeId)
      marker = @map.createPlaceLabel(
        place.name,
        lat: place.latitude,
        lng: place.longitude
      )


  populateNavList: ->
    ids = (groupId for groupId, attrs of @navListItems)

    sortedIds = ids.sort (a, b)=>
      if [@navListItems[a].name, @navListItems[b].name].sort().indexOf(@navListItems[a].name) == 0
        return -1
      else
        return 1

    for id in ids
      groupId    = id
      $itemLabel = $("<span>")
        .attr(id: "group-label-#{id}")
        .html(@navListItems[id].name)
        .data("group-id", groupId)

      $item = $("<div>").addClass("item").append($itemLabel)

      if @navListItems[id].website?
        $itemLink  = $("<a>")
          .attr(
            href: @navListItems[id].website
            target: "_blank"
          ).html("<img src='<%= asset_path('arrow.png') %>'/>")
        $item.append($itemLink)


      $itemLabel.click (event)=>
        groupId   = $(event.target).data("group-id")
        @map.setDefaultIconOnMarkers(@previousMarkerIds)
        for placeId, studentIds of @currentGroups[groupId]
          @map.highlightMarker("group-#{groupId}-#{placeId}")
          @previousMarkerIds.push "group-#{groupId}-#{placeId}"

      $(".nav-list .items").append($item)


  addItemToList: (name, groupId, website)->
    @navListItems[groupId] = {name: name, website: website}


  createMarker: (studentIds, opts) ->
    markup = ""

    for studentId in studentIds
      student = @getStudent(studentId)
      markup += """
        <div class="student">
          <div class='student_name'>#{student.name}</div>
          <div class='expertise'>#{student.expertise_area_name}</div>
          #{if student.website? then "<div class='website'><a href='#{student.website}'>#{student.website}</a></div>" else ""}
        </div>
      """
    opts['weight'] = studentIds.length
    @map.createMarker markup, opts


  markersByCurrentLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        continue if !student.current_work_place_id
        if !@currentGroups[student.current_organisation_id]
          @currentGroups[student.current_organisation_id] = {}

        if !@currentGroups[student.current_organisation_id][student.current_place_id]
          @currentGroups[student.current_organisation_id][student.current_place_id] = []
        @currentGroups[student.current_organisation_id][student.current_place_id].push(id)

        if @placesWithMarkers.indexOf(student.current_place_id) == -1
          @placesWithMarkers.push(student.current_place_id)

      @addPlaceMarkers()
      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getOrganisation(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group


    for id, group of @tmpGroups
      organisation = @getOrganisation(id)
      @addItemToList(organisation.name, id, organisation.website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude
          lng: @getPlace(placeId).longitude
          leafletId: "group-#{id}-#{placeId}"
          labelId:   "group-label-#{id}"
        )


  markersByInternshipLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        continue if !student.internship_place_id
        if !@currentGroups[student.internship_organisation_id]
          @currentGroups[student.internship_organisation_id] = {}
        if !@currentGroups[student.internship_organisation_id][student.internship_place_id]
          @currentGroups[student.internship_organisation_id][student.internship_place_id] = []
        @currentGroups[student.internship_organisation_id][student.internship_place_id].push(id)

        if @placesWithMarkers.indexOf(student.internship_place_id) == -1
          @placesWithMarkers.push(student.internship_place_id)

      @addPlaceMarkers()
      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getOrganisation(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group


    for id, group of @tmpGroups
      organisation = @getOrganisation(id)
      @addItemToList(organisation.name, id, organisation.website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude,
          lng: @getPlace(placeId).longitude
          leafletId: "group-#{id}-#{placeId}"
          labelId:   "group-label-#{id}"
        )


  markersByNativeLocation: (opts)->
    if !opts.filterPlot
      for id, student of @data.students
        @currentGroups[id] = {}
        @currentGroups[id][student.place_id] = [id]

        if @placesWithMarkers.indexOf(student.place_id) == -1
            @placesWithMarkers.push(student.place_id)

      @addPlaceMarkers()
      @tmpGroups = @currentGroups
    else
      for id, group of @currentGroups
        if @getStudent(id).name.match(new RegExp(opts.filterString, "gi"))
          @tmpGroups[id] = group

    for id, group of @tmpGroups
      @addItemToList(@getStudent(id).name, id, @getStudent(id).website)
      for placeId, studentIds of group
        @getPlace(placeId).name
        marker = @createMarker(
          studentIds,
          lat: @getPlace(placeId).latitude,
          lng: @getPlace(placeId).longitude
          leafletId: "group-#{id}-#{placeId}"
        )


  plot: (plotBy, filterPlot=false, filterString="")=>
    $(".nav-list .items").empty()

    @currentPlotType   = plotBy
    @navListItems      = []
    @previousMarkerIds = []
    @tmpGroups = {}

    if !filterPlot
      @currentGroups     = {}
      @placesWithMarkers = []
      $("#search").val("")

    @map.clear()
    @["markersBy#{plotBy}Location"]({filterPlot: filterPlot, filterString: filterString})
    @populateNavList()

